generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

//users table like a flexible notebook
//Some users will have passwords(credentials sign in), 
//some wonâ€™t (because they use Google{email, name, and photo})
model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?      @map("email_verified")
  hashedPassword String?
  image          String?
  role           String         @default("user")
  accounts       Account[]
  sessions       Session[]
  BorrowBook     BorrowBook[]
  Notification   Notification[]

  @@map("users")
}

model Book {
  id               String       @id @default(cuid())
  isbn             String       @unique
  publicationPlace String?
  publicationDate  DateTime?
  title            String
  author           String
  createdAt        DateTime     @default(now())
  BorrowBook       BorrowBook[]

  @@map("books")
}

model BorrowBook {
  id                    String    @id @default(cuid())
  userId                String
  bookId                String
  requestDate           DateTime
  borrowDate            DateTime?
  dueDate               DateTime?
  returnDate            DateTime?
  borrowingTimeExtended Boolean?
  status                String

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("borrow_books")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
